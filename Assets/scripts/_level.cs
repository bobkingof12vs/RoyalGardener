using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

public class _level : MonoBehaviour{
	public int level;
	public char[,] lumps = new char[6,6];
	public int goal;
	public int moves;
	public int countFlowers;

	public byte[] types;

	public static _level _l;

	public void Awake(){
		if (_l == null) {
			DontDestroyOnLoad (gameObject);
			_l = this;
			setLevel(0);
		} else if (_l != this) {
			Destroy (_l);
		}
	}

	public void setLevel (int inLevel){
		level = inLevel;
		switch (level) {
		case 1:
			goal = 800;
			moves = 30;
			types = new byte[] { 0, 1};
			lumps = new char[6, 6] {
				{ '@', ' ', ' ', ' ', ' ', '@' },
				{ '1', '0', ' ', ' ', ' ', '1' },
				{ '1', ' ', '0', ' ', ' ', '1' },
				{ '1', ' ', ' ', '0', ' ', '1' },
				{ '1', ' ', ' ', ' ', '0', '1' },
				{ '@', ' ', ' ', ' ', ' ', '@' }
			};
			break;
		case 2:
			goal = 1500;
			moves = 30;
			types = new byte[] { 1, 2};
			lumps = new char[6, 6] {
				{ '1', '@', ' ', ' ', ' ', ' ' },
				{ ' ', '1', '1', '2', '2', ' ' },
				{ ' ', '1', ' ', '2', '2', ' ' },
				{ ' ', '2', '2', ' ', '1', ' ' },
				{ ' ', '2', '2', '1', '1', ' ' },
				{ ' ', ' ', ' ', ' ', '@', '1' }
			};
			break;
		case 3:
			goal = 1000;
			moves = 25;
			types = new byte[] { 1, 2, 3};
			lumps = new char[6, 6] {
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', '3', ' ', ' ', ' ' },
				{ ' ', '3', '@', '3', ' ', ' ' },
				{ ' ', ' ', '3', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' }
			};
			break;
		case 4:
			goal = 1500;
			moves = 25;
			types = new byte[] { 3, 4};
			lumps = new char[6, 6] {
				{ ' ', ' ', '@', '@', ' ', ' ' },
				{ ' ', ' ', '3', '4', ' ', ' ' },
				{ ' ', '3', ' ', ' ', '4', ' ' },
				{ ' ', '3', ' ', ' ', '4', ' ' },
				{ ' ', ' ', '3', '4', ' ', ' ' },
				{ ' ', ' ', '@', '@', ' ', ' ' }
			};
			break;
		case 5:
			goal = 1600;
			moves = 25;
			types = new byte[] { 4, 0};
			lumps = new char[6, 6] {
				{ ' ', '@', ' ', ' ', '@', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', 'f', 'f', ' ', 'f', ' ' },
				{ ' ', 'f', ' ', 'f', 'f', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', '@', ' ', ' ', '@', ' ' }
			};
			break;
		case 6:
			goal = 2000;
			moves = 30;
			types = new byte[] { 1, 3};
			lumps = new char[6, 6] {
				{ '@', '@', '1', ' ', ' ', ' ' },
				{ '@', '1', ' ', ' ', ' ', ' ' },
				{ '1', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', '3' },
				{ ' ', ' ', ' ', ' ', '3', '@' },
				{ ' ', ' ', ' ', '3', '@', '@' }
			};
			break;
		case 7:
			goal = 2400;
			moves = 40;
			types = new byte[] { 3, 4};
			lumps = new char[6, 6] {
				{ 'f', ' ', ' ', ' ', ' ', '@' },
				{ ' ', 'f', ' ', ' ', ' ', '@' },
				{ ' ', ' ', 'f', ' ', ' ', '@' },
				{ '@', ' ', ' ', 'f', ' ', ' ' },
				{ '@', ' ', ' ', ' ', 'f', ' ' },
				{ '@', ' ', ' ', ' ', ' ', 'f' }
			};
			break;
		case 8:
			goal = 2000;
			moves = 30;
			types = new byte[] { 0, 1, 2};
			lumps = new char[6, 6] {
				{ '@', ' ', ' ', ' ', ' ', '@' },
				{ '@', ' ', ' ', ' ', ' ', '@' },
				{ '1', ' ', '0', '0', ' ', '2' },
				{ '2', ' ', '0', '0', ' ', '1' },
				{ '@', ' ', ' ', ' ', ' ', '@' },
				{ '@', ' ', ' ', ' ', ' ', '@' }
			};
			break;
		case 9:
			goal = 2600;
			moves = 30;
			types = new byte[] { 3, 4};
			lumps = new char[6, 6] {
				{ '@', ' ', ' ', ' ', ' ', '@' },
				{ ' ', 'f', ' ', ' ', 'f', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ '@', 'f', ' ', ' ', 'f', '@' },
				{ '@', 'f', ' ', ' ', 'f', '@' }
			};
			break;
		case 10:
			goal = 2000;
			moves = 35;
			types = new byte[] { 0, 1, 4};
			lumps = new char[6, 6] {
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', '@', ' ', ' ', 'f', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', 'f', ' ', ' ', '@', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' }
			};
			break;
		case 11:
			goal = 2000;
			moves = 30;
			types = new byte[] { 0, 1, 2};
			lumps = new char[6, 6] {
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', 'f', ' ', ' ', '@', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', '@', ' ', ' ', 'f', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' }
			};
			break;
		case 12:
			goal = 2400;
			moves = 40;
			types = new byte[] { 0, 3, 4};
			lumps = new char[6, 6] {
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', '@', ' ', ' ', '@', ' ' },
				{ ' ', 'f', ' ', ' ', 'f', ' ' },
				{ ' ', 'f', ' ', ' ', 'f', ' ' },
				{ ' ', '@', ' ', ' ', '@', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' }
			};
			break;
		case 13:
			goal = 1400;
			moves = 40;
			types = new byte[] { 1, 2, 3};
			lumps = new char[6, 6] {
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', 'f', ' ', ' ', 'f', ' ' },
				{ ' ', ' ', '@', '@', ' ', ' ' },
				{ ' ', ' ', '@', '@', ' ', ' ' },
				{ ' ', 'f', ' ', ' ', 'f', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' }
			};
			break;
		case 14:
			goal = 2400;
			moves = 40;
			types = new byte[] { 2, 3};
			lumps = new char[6, 6] {
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ '3', '3', '2', '3', '@', '@' },
				{ '@', '@', '2', '3', '2', '2' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' }
			};
			break;
		case 15:
			goal = 1000;
			moves = -1;
			types = new byte[] { 0, 1, 2, 3, 4};
			lumps = new char[6, 6] {
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' }
			};
			break;
		default:
			goal = 1000;
			moves = 0;
			types = new byte[] { 0, 1, 2, 3, 4};
			lumps = new char[6, 6] {
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' },
				{ ' ', ' ', ' ', ' ', ' ', ' ' }
			};
			break;
		}

		countFlowers = types.Count ();
	}
}
